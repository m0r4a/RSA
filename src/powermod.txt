I did this code before re-writing it in C, not the best practice but
I wanted to keep it, just in case


# def power_mod(base: int, exponent: int, modulus: int) -> int:
#     """
#     Calculate (base ^ exponent) % modulus efficiently using binary exponentiation.
#
#     Args:
#         base: The base number
#         exponent: The exponent (must be non-negative)
#         modulus: The modulus
#
#     Returns:
#         The result of (base ^ exponent) % modulus
#
#     Raises:
#         ValueError: If modulus is 0 or exponent is negative
#     """
#     if modulus == 0:
#         raise ValueError("Modulus cannot be zero")
#     if exponent < 0:
#         raise ValueError("Exponent must be non-negative")
#
#     # Handle funny cases
#     if modulus == 1:
#         return 0
#
#     # Base should be positive
#     base = base % modulus
#
#     result = 1
#     while exponent > 0:
#
#         if exponent & 1:
#             result = (result * base) % modulus
#
#         base = (base * base) % modulus
#         exponent >>= 1
#
#     return result
